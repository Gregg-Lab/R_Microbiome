y <- as.data.frame(y)
for(j in 1:length(TAX.LIST)){
col.name <- TAX.LIST[j]
y$temp <- rep.int(0, nrow(y))
names(y)[ncol(y)] <- col.name
}
return(y)
}
#returns sums table with calculated values
calculateSumsTable <- function(x){
original_length <- ncol(otu.matrix)
x <- as.data.frame(x)
names(x)[1:original_length] <- rm_g[,eval(TAXONOMY_LEVEL)]
for(i in 1:nrow(x)){
for(j in 1:original_length){
for(k in 1:length(TAX.LIST)){
if(colnames(x)[j] == TAX.LIST[k]){
x[i,original_length+k] <- x[i,j] + x[i,original_length+k]
}
}
}
}
return(x)
}
#returns the sums table exclusively
exportSumsTable <- function(x){
original_length <- ncol(otu.matrix)
y <- x[,(original_length+1):(original_length+TAX.LENGTH)] #adds 1 to get the index of the FIRST new column
return(y)
}
#Returns a subset of data.frame x selecting for the taxa element y
calculateAbundance <- function(x,y){
x <- as.data.frame(x)
x <- x[eval(y),]
return(x)
}
#############################
#get into correct directory
setwd("~/Downloads/R_Microbiome/Dynamic_Abundance/") #mac users
#READ IN RAW FILES
tax <- read.table(file=TAXONOMY.FILE,
row.names = 1,
header=TRUE,
check.names=FALSE,
comment.char="") #will become otu.class
otu.info <- read.table(file=TIMEPOINT.FILE, header=TRUE, row.names = 2) #will become rm_g
meta <- read.table(file=DESIGN.FILE, row.names = NULL, header =TRUE)
#CLEAN TAXONOMY FILE
tax_clean <- cleanTaxonomy(tax, minOtu = 200)
###GET TAX LEVEL AND THE CORRESPONDING ELEMENTS ###
TAX.LIST <- sort(unique(tax_clean[,eval(TAXONOMY_LEVEL)]))
TAX.LENGTH <- as.numeric(length(TAX.LIST))
###############
#SUBSET TAXONOMY
tax_clean <- subset(tax_clean, select = eval(TAXONOMY_LEVEL))
tax_clean$OTU <- rownames(tax_clean)
###PART 2. CREATE RELATIVE ABUNDANCE FILE###
###PART 2A.  CLEAN FILES (remove bad OTUs and samples)
#selects for samples with 1000+ total reads and otus with 200+ total reads
otu.info <- subset(otu.info, select = -c(label, numOtus))
otu.info <- otu.info[rowSums(otu.info) > 1000, ]
#select just p19 values
otu.info$Temp_Name <- rownames(otu.info)
#removes any sample in meta that didn't have enough reads in otu.info
meta <- meta[meta$Sample %in% otu.info$Temp_Name,]
#removes all samples in otu.info that are not in the specific meta file (in other words, if the otu.info has multiple timepoints, meta can be used to subset by timepoint)
otu.info <- otu.info[otu.info$Temp_Name %in% meta$Sample,]
otu.info <- subset(otu.info, select = -Temp_Name)
#finally, delete all OTUs that were removed in master tax_clean file
otu.info <- otu.info[,names(otu.info) %in% tax_clean$OTU]
otu.matrix <- as.matrix(otu.info)
otu.rel <- otu.matrix/rowSums(otu.matrix) #check with 'rowSums(otu.rel)' all rows = 1
#otu.rel <- subset(otu.rel, select = -c(label, numOtus))
otu.rel.t <- t(otu.rel) #transpose #check with 'colSums(otu.rel.t)' all columns = 1
otu.rel.t <- as.data.frame(otu.rel.t) #make it so we can add back in OTU names without changing to list
otu.rel.t$OTU <- rownames(otu.rel.t) #add OTUs column so we can merge
rm_g <- merge(tax_clean, otu.rel.t, by.x = "OTU", by.y = "OTU")
###PART 2. COMPLETE###
### rm_g FILE COMPLETED ###
otubar <- as.matrix(rm_g)
rownames(otubar) <- otubar[,eval(TAXONOMY_LEVEL)]
otubar <- subset(otubar, select = -c(1:2)) #deletes first two columns.  Col1 = OTU, Col2 = TAXONOMY_LEVEL selection
bar <- as.data.frame(t(otubar))
bar$Sample <- meta$Sample
bar$Group <- meta$Group
bar_ordered <- bar[order(bar$Group),]
#splits into separate groups
##GET GROUPS##
GROUP.LIST <- as.character(sort(unique(meta$Group)))
GROUP.LENGTH <- as.numeric(length(GROUP.LIST))
###
all <- split(bar_ordered, bar_ordered$Group)
#list2env(all, envir=.GlobalEnv) #converts lists to data frames
#create sums columns in all tables
all_SUMS <- lapply(all, createSumsTable) #function defined at top of script
#calculate sums columns in all tables
all_SUMS_CALC <- lapply(all_SUMS, calculateSumsTable) #fxn defined at top of script
#export sums tables
all_SUMS_CALC_TABLES <- lapply(all_SUMS_CALC, exportSumsTable) #fxn defined at top of script
#export .csv files of all sum tables
for(i in names(all_SUMS_CALC_TABLES)){
write_csv(all_SUMS_CALC_TABLES[[i]], path = paste0(i,".csv"))
}
#take all sums tables and combine for plotting
sums.total <- bind_rows(all_SUMS_CALC_TABLES)
sums.total <- as.data.frame(sums.total) #change from matrix
#add back unique sample IDs
sums.total <- t(sums.total)
group <- bar_ordered$Group
ids <- 1:nrow(bar_ordered)
names <- paste(group, ids)
colnames(sums.total) <- names
#CALCULATE TAXA ELEMENT AND MAKE GGPLOT COMPATIBLE TABLE
#DOES ONE AT A TIME BASED ON VALUE OF TAXA_ELEMENT AND TAXONOMY_LEVEL
selected_taxa <- calculateAbundance(sums.total, eval(TAXA_ELEMENT))
selected_taxa <- as.data.frame(t(selected_taxa))
selected_taxa$group <- removeNumbers(rownames(selected_taxa))
selected_taxa$taxa <- eval(TAXA_ELEMENT)
names(selected_taxa)[1] <- "abundance"
selected_taxa$abundance <- selected_taxa$abundance * 100 #convert to percentage
plots <- ggplot(data=selected_taxa,
mapping = aes(x=group, y=abundance, fill=group)) +
geom_boxplot() +
facet_wrap(~taxa) +
labs(title = "Relative Abundance Plot", y = "Relative Abundances (%)", x = "Groups") +
stat_compare_means(comparisons = list(c("Ctrl ", "HFD "),
c("Ctrl ", "Met "), c("HFD ", "Met ")))
plots
summary(selected_taxa)
summary(selected_taxa$group)
selected_taxa$group
selected_taxa
summary(selected_taxa$abundance ~ selected_taxa$group)
runApp('~/Downloads/GitHub/shiny-server/absboxplot')
##CALCULATE ALL VALUES AT ONCE BASED ON TAXONOMY_LEVEL AND NOT TAXA_ELEMENT
sums.total <- as.data.frame(sums.total)
sums.total$taxa <- rownames(sums.total)
final.data <- gather(sums.total, "group", "abundance", -taxa)
final.data$group <- removeNumbers(final.data$group)
final.data$group <- str_replace_all(final.data$group, pattern = " ", replacement = "")
final.data$abundance <- final.data$abundance * 100 #convert to percentage
my_comparisons <- list(c("Ctrl", "Met"),
c("Met", "HFD"),
c("Ctrl", "HFD"))
plots2 <- ggplot(data=final.data,
mapping = aes(x=group, y=abundance, fill=group)) +
geom_boxplot() +
facet_wrap(~taxa, scales = "free") +
coord_cartesian(ylim = c(0,120)) +
stat_compare_means(comparisons = my_comparisons, label = "p.signif", label.y = c(75, 95, 105)) +
labs(tital = "Class Relative Abundnace Plot", y = "Relative Abundances (%)", x = "Groups")
plots2
plots2 <- ggplot(data=final.data,
mapping = aes(x=group, y=abundance, fill=group)) +
geom_boxplot() +
facet_wrap(~taxa, scales = "free") +
coord_cartesian(ylim = c(0,120)) +
stat_compare_means(comparisons = my_comparisons, label = "p.signif") +
labs(tital = "Class Relative Abundnace Plot", y = "Relative Abundances (%)", x = "Groups")
plots2
sums.total <- as.data.frame(sums.total)
sums.total$taxa <- rownames(sums.total)
final.data <- gather(sums.total, "group", "abundance", -taxa)
final.data$group <- removeNumbers(final.data$group)
final.data$group <- str_replace_all(final.data$group, pattern = " ", replacement = "")
final.data$abundance <- final.data$abundance * 100 #convert to percentage
my_comparisons <- list(c("Ctrl", "Met"),
c("Met", "HFD"),
c("Ctrl", "HFD"))
plots2 <- ggplot(data=final.data,
mapping = aes(x=group, y=abundance, fill=group)) +
geom_boxplot() +
facet_wrap(~taxa, scales = "free") +
coord_cartesian(ylim = c(0,120)) +
stat_compare_means(comparisons = my_comparisons, label = "p.signif") +
labs(tital = "Class Relative Abundnace Plot", y = "Relative Abundances (%)", x = "Groups")
plots2
plots2
plots2 <- ggplot(data=final.data,
mapping = aes(x=group, y=abundance, fill=group)) +
geom_boxplot() +
facet_wrap(~taxa, scales = "free") +
#coord_cartesian(ylim = c(0,120)) +
stat_compare_means(comparisons = my_comparisons, label = "p.signif") +
labs(tital = "Class Relative Abundnace Plot", y = "Relative Abundances (%)", x = "Groups")
plots2
plots2 <- ggplot(data=final.data,
mapping = aes(x=group, y=abundance, fill=group)) +
geom_boxplot() +
facet_wrap(~taxa, scales = "free") +
#coord_cartesian(ylim = c(0,120)) +
stat_compare_means(comparisons = my_comparisons, label = "p.signif") +
labs(title = "Class Relative Abundance Plot", y = "Relative Abundances (%)", x = "Groups")
plots2
plots2
plots2 <- ggplot(data=final.data,
mapping = aes(x=group, y=abundance, fill=group)) +
geom_boxplot() +
facet_wrap(~taxa, scales = "free") +
#coord_cartesian(ylim = c(0,120)) +
stat_compare_means(comparisons = my_comparisons, label = "p.signif") +
labs(title = "Class Relative Abundance Plot", y = "Relative Abundances (%)", x = "Groups")
plots2
rm(list=ls())
#TITLE
###Dynamic Relative Abundance Plots
#DESCRIPTION:
###Plots relative abundance plots for multiple taxonomic levels
###First, specify either Phylum, Class, Order, and Family.
###Second, specify which taxa to plot.
###E.g. LEVEL: Phylum; TAXA: Firmicutes
#AUTHOR:
###4-23-2019
###Created by Zach Carlson, BS
###email: zcarlson@umich.edu
###DO NOT REMOVE ABOVE TEXT#
library(RColorBrewer) #gives color schemes
library(ggplot2) #data plotter
library(gplots) #data plotter
library(vegan) #ecology package, diversity analysis, etc.
library(plyr) #tool for splitting, applying, and combining data
library(stringr) #loaded to use str_replace_all() which removes all special characters in a string
library(tm) #loaded to use removeNumbers() which removes any number in a string
library(shiny)
library(tidyverse) #ggplot2, tibble, purrr, tidyr, readr, dplyr, stringr, forcats
library(ggpubr)
######ENTER IN VALUES######
TITLE <- "Relative Test"
TAXONOMY_LEVEL <- "Genus"
TAXA_ELEMENT <- "Bacteroides"
TAXONOMY.FILE <- "cohort_d.final.0.03.cons.taxonomy" #Cols: Size, Taxonomy
TIMEPOINT.FILE <- "cohort_d.final.shared" #Cols: OTU0001, OTU0002, etc.
DESIGN.FILE <- "cohort_d_4wk.design.txt" #Cols: Row, Sample, Group
###########################
#######DEFINE FUNCTIONS######
#REQUIRES:  .taxonomy file with "Size" and "Taxonomy" columns.
#MODIFIES:  taxonomy data table
#EFFECTS: -Parses raw .taxonomy file into its taxonomic levels
#         -Removes OTUs that have under minOtu total sequence reads, default is 200
#NOTE: minSamples > minOtu.  Bad samples do not contribue to minOtu count.
cleanTaxonomy <- function(x,
minOtu = 200){
x <- x[x$Size > minOtu,] #selects otus with over 200 hits
x <- separate(x, Taxonomy, into = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep = ";")
x <- subset(x, select = -Size) #remove size
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
x[i,j] <- removeNumbers(x[i,j]) #remove numbers
x[i,j] <- str_replace_all(x[i,j], "[[:punct:]]", "") #removes "(" ")" and all special characters
x[i,j] <- str_replace_all(x[i,j], "unclassified", "") #removes "unclassified"
}
}
return(x)
}
#Creates empty sums table based on TAXONOMY_LEVEL selected filled with sums columns, one for each element in TAX.LIST.
createSumsTable <- function(x){
y <- subset(x, select = -c(Sample, Group))
y <- as.matrix(y)
class(y) <- "numeric" #change matrix to numeric form rather than character
colnames(y) <- rm_g[,eval(TAXONOMY_LEVEL)] #removes numbers from colnames. e.g. Bacteroidetes.1 -> Bacteroidetes
y <- as.data.frame(y)
for(j in 1:length(TAX.LIST)){
col.name <- TAX.LIST[j]
y$temp <- rep.int(0, nrow(y))
names(y)[ncol(y)] <- col.name
}
return(y)
}
#returns sums table with calculated values
calculateSumsTable <- function(x){
original_length <- ncol(otu.matrix)
x <- as.data.frame(x)
names(x)[1:original_length] <- rm_g[,eval(TAXONOMY_LEVEL)]
for(i in 1:nrow(x)){
for(j in 1:original_length){
for(k in 1:length(TAX.LIST)){
if(colnames(x)[j] == TAX.LIST[k]){
x[i,original_length+k] <- x[i,j] + x[i,original_length+k]
}
}
}
}
return(x)
}
#returns the sums table exclusively
exportSumsTable <- function(x){
original_length <- ncol(otu.matrix)
y <- x[,(original_length+1):(original_length+TAX.LENGTH)] #adds 1 to get the index of the FIRST new column
return(y)
}
#Returns a subset of data.frame x selecting for the taxa element y
calculateAbundance <- function(x,y){
x <- as.data.frame(x)
x <- x[eval(y),]
return(x)
}
#############################
#get into correct directory
setwd("~/Downloads/R_Microbiome/Dynamic_Abundance/") #mac users
#READ IN RAW FILES
tax <- read.table(file=TAXONOMY.FILE,
row.names = 1,
header=TRUE,
check.names=FALSE,
comment.char="") #will become otu.class
otu.info <- read.table(file=TIMEPOINT.FILE, header=TRUE, row.names = 2) #will become rm_g
meta <- read.table(file=DESIGN.FILE, row.names = NULL, header =TRUE)
#CLEAN TAXONOMY FILE
tax_clean <- cleanTaxonomy(tax, minOtu = 200)
###GET TAX LEVEL AND THE CORRESPONDING ELEMENTS ###
TAX.LIST <- sort(unique(tax_clean[,eval(TAXONOMY_LEVEL)]))
TAX.LENGTH <- as.numeric(length(TAX.LIST))
###############
#SUBSET TAXONOMY
tax_clean <- subset(tax_clean, select = eval(TAXONOMY_LEVEL))
tax_clean$OTU <- rownames(tax_clean)
###PART 2. CREATE RELATIVE ABUNDANCE FILE###
###PART 2A.  CLEAN FILES (remove bad OTUs and samples)
#selects for samples with 1000+ total reads and otus with 200+ total reads
otu.info <- subset(otu.info, select = -c(label, numOtus))
otu.info <- otu.info[rowSums(otu.info) > 1000, ]
#select just p19 values
otu.info$Temp_Name <- rownames(otu.info)
#removes any sample in meta that didn't have enough reads in otu.info
meta <- meta[meta$Sample %in% otu.info$Temp_Name,]
#removes all samples in otu.info that are not in the specific meta file (in other words, if the otu.info has multiple timepoints, meta can be used to subset by timepoint)
otu.info <- otu.info[otu.info$Temp_Name %in% meta$Sample,]
otu.info <- subset(otu.info, select = -Temp_Name)
#finally, delete all OTUs that were removed in master tax_clean file
otu.info <- otu.info[,names(otu.info) %in% tax_clean$OTU]
otu.matrix <- as.matrix(otu.info)
otu.rel <- otu.matrix/rowSums(otu.matrix) #check with 'rowSums(otu.rel)' all rows = 1
#otu.rel <- subset(otu.rel, select = -c(label, numOtus))
otu.rel.t <- t(otu.rel) #transpose #check with 'colSums(otu.rel.t)' all columns = 1
otu.rel.t <- as.data.frame(otu.rel.t) #make it so we can add back in OTU names without changing to list
otu.rel.t$OTU <- rownames(otu.rel.t) #add OTUs column so we can merge
rm_g <- merge(tax_clean, otu.rel.t, by.x = "OTU", by.y = "OTU")
###PART 2. COMPLETE###
### rm_g FILE COMPLETED ###
otubar <- as.matrix(rm_g)
rownames(otubar) <- otubar[,eval(TAXONOMY_LEVEL)]
otubar <- subset(otubar, select = -c(1:2)) #deletes first two columns.  Col1 = OTU, Col2 = TAXONOMY_LEVEL selection
bar <- as.data.frame(t(otubar))
bar$Sample <- meta$Sample
bar$Group <- meta$Group
bar_ordered <- bar[order(bar$Group),]
#splits into separate groups
##GET GROUPS##
GROUP.LIST <- as.character(sort(unique(meta$Group)))
GROUP.LENGTH <- as.numeric(length(GROUP.LIST))
###
all <- split(bar_ordered, bar_ordered$Group)
#list2env(all, envir=.GlobalEnv) #converts lists to data frames
#create sums columns in all tables
all_SUMS <- lapply(all, createSumsTable) #function defined at top of script
#calculate sums columns in all tables
all_SUMS_CALC <- lapply(all_SUMS, calculateSumsTable) #fxn defined at top of script
#export sums tables
all_SUMS_CALC_TABLES <- lapply(all_SUMS_CALC, exportSumsTable) #fxn defined at top of script
#export .csv files of all sum tables
for(i in names(all_SUMS_CALC_TABLES)){
write_csv(all_SUMS_CALC_TABLES[[i]], path = paste0(i,".csv"))
}
#take all sums tables and combine for plotting
sums.total <- bind_rows(all_SUMS_CALC_TABLES)
sums.total <- as.data.frame(sums.total) #change from matrix
#add back unique sample IDs
sums.total <- t(sums.total)
group <- bar_ordered$Group
ids <- 1:nrow(bar_ordered)
names <- paste(group, ids)
colnames(sums.total) <- names
#CALCULATE TAXA ELEMENT AND MAKE GGPLOT COMPATIBLE TABLE
#DOES ONE AT A TIME BASED ON VALUE OF TAXA_ELEMENT AND TAXONOMY_LEVEL
selected_taxa <- calculateAbundance(sums.total, eval(TAXA_ELEMENT))
selected_taxa <- as.data.frame(t(selected_taxa))
selected_taxa$group <- removeNumbers(rownames(selected_taxa))
selected_taxa$taxa <- eval(TAXA_ELEMENT)
names(selected_taxa)[1] <- "abundance"
selected_taxa$abundance <- selected_taxa$abundance * 100 #convert to percentage
plots <- ggplot(data=selected_taxa,
mapping = aes(x=group, y=abundance, fill=group)) +
geom_boxplot() +
facet_wrap(~taxa) +
labs(title = "Relative Abundance Plot", y = "Relative Abundances (%)", x = "Groups") +
stat_compare_means(comparisons = list(c("Ctrl ", "HFD "),
c("Ctrl ", "Met "), c("HFD ", "Met ")))
plots
##CALCULATE ALL VALUES AT ONCE BASED ON TAXONOMY_LEVEL AND NOT TAXA_ELEMENT
sums.total <- as.data.frame(sums.total)
sums.total$taxa <- rownames(sums.total)
final.data <- gather(sums.total, "group", "abundance", -taxa)
final.data$group <- removeNumbers(final.data$group)
final.data$group <- str_replace_all(final.data$group, pattern = " ", replacement = "")
final.data$abundance <- final.data$abundance * 100 #convert to percentage
my_comparisons <- list(c("Ctrl", "Met"),
c("Met", "HFD"),
c("Ctrl", "HFD"))
plots2 <- ggplot(data=final.data,
mapping = aes(x=group, y=abundance, fill=group)) +
geom_boxplot() +
facet_wrap(~taxa, scales = "free") +
#coord_cartesian(ylim = c(0,120)) +
stat_compare_means(comparisons = my_comparisons, label = "p.signif") +
labs(title = "Genus Relative Abundance Plot", y = "Relative Abundances (%)", x = "Groups")
plots2
plots <- ggplot(data=selected_taxa,
mapping = aes(x=group, y=abundance, fill=group)) +
geom_boxplot() +
facet_wrap(~taxa) +
labs(title = "Relative Abundance Plot", y = "Relative Abundances (%)", x = "Groups") +
stat_compare_means(comparisons = list(c("Ctrl ", "HFD "),
c("Ctrl ", "Met "), c("HFD ", "Met ")))
plots
plots <- ggplot(data=selected_taxa,
mapping = aes(x=group, y=abundance, fill=group)) +
geom_boxplot() +
facet_wrap(~taxa) +
labs(title = "Genus Bacteroides Relative Abundance Plot", y = "Relative Abundances (%)", x = "Groups") +
stat_compare_means(comparisons = list(c("Ctrl ", "HFD "),
c("Ctrl ", "Met "), c("HFD ", "Met ")))
plots
unique(tax_clean$Genus)
TAXA_ELEMENT <- "Akkermansia"
tax <- read.table(file=TAXONOMY.FILE,
row.names = 1,
header=TRUE,
check.names=FALSE,
comment.char="") #will become otu.class
otu.info <- read.table(file=TIMEPOINT.FILE, header=TRUE, row.names = 2) #will become rm_g
meta <- read.table(file=DESIGN.FILE, row.names = NULL, header =TRUE)
#CLEAN TAXONOMY FILE
tax_clean <- cleanTaxonomy(tax, minOtu = 200)
###GET TAX LEVEL AND THE CORRESPONDING ELEMENTS ###
TAX.LIST <- sort(unique(tax_clean[,eval(TAXONOMY_LEVEL)]))
TAX.LENGTH <- as.numeric(length(TAX.LIST))
###############
#SUBSET TAXONOMY
tax_clean <- subset(tax_clean, select = eval(TAXONOMY_LEVEL))
tax_clean$OTU <- rownames(tax_clean)
###PART 2. CREATE RELATIVE ABUNDANCE FILE###
###PART 2A.  CLEAN FILES (remove bad OTUs and samples)
#selects for samples with 1000+ total reads and otus with 200+ total reads
otu.info <- subset(otu.info, select = -c(label, numOtus))
otu.info <- otu.info[rowSums(otu.info) > 1000, ]
#select just p19 values
otu.info$Temp_Name <- rownames(otu.info)
#removes any sample in meta that didn't have enough reads in otu.info
meta <- meta[meta$Sample %in% otu.info$Temp_Name,]
#removes all samples in otu.info that are not in the specific meta file (in other words, if the otu.info has multiple timepoints, meta can be used to subset by timepoint)
otu.info <- otu.info[otu.info$Temp_Name %in% meta$Sample,]
otu.info <- subset(otu.info, select = -Temp_Name)
#finally, delete all OTUs that were removed in master tax_clean file
otu.info <- otu.info[,names(otu.info) %in% tax_clean$OTU]
otu.matrix <- as.matrix(otu.info)
otu.rel <- otu.matrix/rowSums(otu.matrix) #check with 'rowSums(otu.rel)' all rows = 1
#otu.rel <- subset(otu.rel, select = -c(label, numOtus))
otu.rel.t <- t(otu.rel) #transpose #check with 'colSums(otu.rel.t)' all columns = 1
otu.rel.t <- as.data.frame(otu.rel.t) #make it so we can add back in OTU names without changing to list
otu.rel.t$OTU <- rownames(otu.rel.t) #add OTUs column so we can merge
rm_g <- merge(tax_clean, otu.rel.t, by.x = "OTU", by.y = "OTU")
###PART 2. COMPLETE###
### rm_g FILE COMPLETED ###
otubar <- as.matrix(rm_g)
rownames(otubar) <- otubar[,eval(TAXONOMY_LEVEL)]
otubar <- subset(otubar, select = -c(1:2)) #deletes first two columns.  Col1 = OTU, Col2 = TAXONOMY_LEVEL selection
bar <- as.data.frame(t(otubar))
bar$Sample <- meta$Sample
bar$Group <- meta$Group
bar_ordered <- bar[order(bar$Group),]
#splits into separate groups
##GET GROUPS##
GROUP.LIST <- as.character(sort(unique(meta$Group)))
GROUP.LENGTH <- as.numeric(length(GROUP.LIST))
###
all <- split(bar_ordered, bar_ordered$Group)
#list2env(all, envir=.GlobalEnv) #converts lists to data frames
#create sums columns in all tables
all_SUMS <- lapply(all, createSumsTable) #function defined at top of script
#calculate sums columns in all tables
all_SUMS_CALC <- lapply(all_SUMS, calculateSumsTable) #fxn defined at top of script
#export sums tables
all_SUMS_CALC_TABLES <- lapply(all_SUMS_CALC, exportSumsTable) #fxn defined at top of script
#export .csv files of all sum tables
for(i in names(all_SUMS_CALC_TABLES)){
write_csv(all_SUMS_CALC_TABLES[[i]], path = paste0(i,".csv"))
}
#take all sums tables and combine for plotting
sums.total <- bind_rows(all_SUMS_CALC_TABLES)
sums.total <- as.data.frame(sums.total) #change from matrix
#add back unique sample IDs
sums.total <- t(sums.total)
group <- bar_ordered$Group
ids <- 1:nrow(bar_ordered)
names <- paste(group, ids)
colnames(sums.total) <- names
#CALCULATE TAXA ELEMENT AND MAKE GGPLOT COMPATIBLE TABLE
#DOES ONE AT A TIME BASED ON VALUE OF TAXA_ELEMENT AND TAXONOMY_LEVEL
selected_taxa <- calculateAbundance(sums.total, eval(TAXA_ELEMENT))
selected_taxa <- as.data.frame(t(selected_taxa))
selected_taxa$group <- removeNumbers(rownames(selected_taxa))
selected_taxa$taxa <- eval(TAXA_ELEMENT)
names(selected_taxa)[1] <- "abundance"
selected_taxa$abundance <- selected_taxa$abundance * 100 #convert to percentage
plots <- ggplot(data=selected_taxa,
mapping = aes(x=group, y=abundance, fill=group)) +
geom_boxplot() +
facet_wrap(~taxa) +
labs(title = "Genus Bacteroides Relative Abundance Plot", y = "Relative Abundances (%)", x = "Groups") +
stat_compare_means(comparisons = list(c("Ctrl ", "HFD "),
c("Ctrl ", "Met "), c("HFD ", "Met ")))
plots
