###PART 2. COMPLETE###
### rm_g FILE COMPLETED ###
otubar <- as.matrix(rm_g)
names(otubar) <- names(rm_g) #as.matrix deletes col.names and row.names, immediately reassign column names because no ordering has occured.
rownames(otubar) <- rm_g[,eval(TAXONOMY_LEVEL)]
otubar <- subset(otubar, select = -c(1:2)) #deletes first two columns.  Col1 = OTU, Col2 = eval(TAXONOMY_LEVEL) selection
bar <- as.data.frame(t(otubar))
bar$Sample <- rownames(bar)
bar_meta <- merge(meta, bar, by.x = "Sample", by.y = "Sample")
bar_ordered <- bar_meta[order(bar_meta$Group),]
#splits into separate groups
##GET GROUPS##
GROUP.LIST <- as.character(sort(unique(meta$Group)))
GROUP.LENGTH <- as.numeric(length(GROUP.LIST))
###
all <- split(bar_ordered, bar_ordered$Group)
#list2env(all, envir=.GlobalEnv) #converts lists to data frames
#create sums columns in all tables
all_SUMS <- lapply(all, createEmptySumsTable) #function defined at top of script
#calculate sums columns in all tables
all_SUMS_CALC <- lapply(all_SUMS, calculateSumsTable) #fxn defined at top of script
#export sums tables
all_SUMS_CALC_TABLES <- lapply(all_SUMS_CALC, exportSumsTable) #fxn defined at top of script
#export .csv files of all sum tables
for(i in names(all_SUMS_CALC_TABLES)){
write_csv(all_SUMS_CALC_TABLES[[i]], path = paste0(i,".csv"))
}
#take all sums tables and combine for plotting and exporting
sums.total <- bind_rows(all_SUMS_CALC_TABLES)
sums.total <- as.data.frame(sums.total) #change from matrix
#TITLE
###Dynamic Stacked Community Relative Abundance Plots
#DESCRIPTION:
###Plots community relative abundance plots for multiple taxonomic levels
###Can view either Phylum, Class, Order, and Family.
###Genus is theoretically possible, but the large legend makes the graph impossible to see.
#AUTHOR:
###Date Created: 06-10-2019
###Date Last Modified:  06-10-2019
###Created by Zach Carlson, BS
###email: zcarlson@umich.edu
###DO NOT REMOVE ABOVE TEXT#
library(RColorBrewer) #gives color schemes
library(ggplot2) #data plotter
library(gplots) #data plotter
library(vegan) #ecology package, diversity analysis, etc.
library(plyr) #tool for splitting, applying, and combining data
library(stringr) #loaded to use str_replace_all() which removes all special characters in a string
library(tm) #loaded to use removeNumbers() which removes any number in a string
library(shiny)
library(tidyverse) #ggplot2, tibble, purrr, tidyr, readr, dplyr, stringr, forcats
######ENTER IN VALUES######
TITLE <- "Relative Test"
TAXONOMY_LEVEL <- "Family"
TAXONOMY.FILE <- "combined.final.0.03.cons.taxonomy"
TIMEPOINT.FILE <- "combined.final.shared"
DESIGN.FILE <- "combined_P19.design.txt" #Cols: Row, Sample, Group
###########################
######READ IN FUNCTIONS FILE######
source("~/Downloads/R_Microbiome/utilities.R")
##################################
#get into correct directory
setwd("~/Downloads/Microbiome-June2019/Cohort_7_9/P19_PhylaAbundance/") #mac users
#CLEAN TAXONOMY FILE
tax_clean <- cleanTaxonomyKeepUnclassified(tax, minOtu = 200)
tax_clean_unclassified <- cleanUnclassified(tax_clean, column = "Phylum")
library(tm) #loaded to use removeNumbers() which removes any number in a string
library(shiny)
library(tidyverse) #ggplot2, tibble, purrr, tidyr, readr, dplyr, stringr, forcats
library(ggpubr)
######READ IN FUNCTIONS FILE######
source("~/Downloads/R_Microbiome/utilities.R")
######ENTER IN VALUES######
TITLE <- "Relative Test"
TAXONOMY_LEVEL <- "Family"
TAXONOMY.FILE <- "cohort_d.final.0.03.cons.taxonomy"
TIMEPOINT.FILE <- "cohort_d.final.shared"
DESIGN.FILE <- "cohort_d_4wk.design.txt" #Cols: Row, Sample, Group
setwd("~/Downloads/R_Microbiome/Barplot")
#READ IN RAW FILES
tax <- read.table(file=TAXONOMY.FILE,
row.names = 1,
header=TRUE,
check.names=FALSE,
comment.char="") #will become otu.class
otu.info <- read.table(file=TIMEPOINT.FILE, header=TRUE, row.names = 2) #will become rm_g
meta <- read.table(file=DESIGN.FILE, row.names = NULL, header =TRUE)
#CLEAN TAXONOMY FILE
tax_clean <- cleanTaxonomyKeepUnclassified(tax, minOtu = 200)
tax_clean_unclassified <- cleanUnclassified(tax_clean, column = "Class")
###GET TAX LEVEL AND THE CORRESPONDING ELEMENTS ###
TAX.LIST <- sort(unique(tax_clean[,eval(TAXONOMY_LEVEL)]))
TAX.LENGTH <- as.numeric(length(TAX.LIST))
#SUBSET TAXONOMY
#save OTU info in row names
rownames(tax_clean_unclassified) <- tax_clean_unclassified$OTU
tax_clean_unclassified <- subset(tax_clean_unclassified, select = eval(TAXONOMY_LEVEL))
#add back in OTU column using row names
tax_clean_unclassified$OTU <- rownames(tax_clean_unclassified)
###PART 2. CREATE RELATIVE ABUNDANCE FILE###
#selects for samples with 1000+ total reads and otus with 200+ total reads
otu.info <- subset(otu.info, select = -c(label, numOtus))
otu.info <- otu.info[rowSums(otu.info) > 1000, ]
#select just p19 values
otu.info$Temp_Name <- rownames(otu.info)
otu.info <- otu.info[otu.info$Temp_Name %in% meta$Sample,] #selects the exact number of samples, accounts for otu.info files with multiple timepoints
otu.info <- subset(otu.info, select = -Temp_Name)
#selects correct otus
otu.info <- otu.info[,names(otu.info) %in% tax_clean$OTU]
otu.matrix <- as.matrix(otu.info)
otu.rel <- otu.matrix/rowSums(otu.matrix) #check with 'rowSums(otu.rel)' all rows = 1
#otu.rel <- subset(otu.rel, select = -c(label, numOtus))
otu.rel.t <- t(otu.rel) #transpose #check with 'colSums(otu.rel.t)' all columns = 1
otu.rel.t <- as.data.frame(otu.rel.t) #make it so we can add back in OTU names without changing to list
otu.rel.t$OTU <- rownames(otu.rel.t) #add OTUs column so we can merge
rm_g <- merge(tax_clean_unclassified, otu.rel.t, by.x = "OTU", by.y = "OTU")
otubar <- as.matrix(rm_g)
names(otubar) <- names(rm_g) #as.matrix deletes col.names and row.names, immediately reassign column names because no ordering has occured.
rownames(otubar) <- rm_g[,eval(TAXONOMY_LEVEL)]
otubar <- subset(otubar, select = -c(1:2)) #deletes first two columns.  Col1 = OTU, Col2 = eval(TAXONOMY_LEVEL) selection
bar <- as.data.frame(t(otubar))
bar$Sample <- rownames(bar)
bar_meta <- merge(meta, bar, by.x = "Sample", by.y = "Sample")
bar_ordered <- bar_meta[order(bar_meta$Group),]
#splits into separate groups
##GET GROUPS##
GROUP.LIST <- as.character(sort(unique(meta$Group)))
GROUP.LENGTH <- as.numeric(length(GROUP.LIST))
all <- split(bar_ordered, bar_ordered$Group)
#create sums columns in all tables
all_SUMS <- lapply(all, createEmptySumsTable) #function defined at top of script
#calculate sums columns in all tables
all_SUMS_CALC <- lapply(all_SUMS, calculateSumsTable) #fxn defined at top of script
TAXONOMY_LEVEL <- "Phylum"
TAXONOMY.FILE <- "cohort_d.final.0.03.cons.taxonomy"
TIMEPOINT.FILE <- "cohort_d.final.shared"
DESIGN.FILE <- "cohort_d_4wk.design.txt" #Cols: Row, Sample, Group
setwd("~/Downloads/R_Microbiome/Barplot")
#READ IN RAW FILES
tax <- read.table(file=TAXONOMY.FILE,
row.names = 1,
header=TRUE,
check.names=FALSE,
comment.char="") #will become otu.class
otu.info <- read.table(file=TIMEPOINT.FILE, header=TRUE, row.names = 2) #will become rm_g
meta <- read.table(file=DESIGN.FILE, row.names = NULL, header =TRUE)
#CLEAN TAXONOMY FILE
tax_clean <- cleanTaxonomyKeepUnclassified(tax, minOtu = 200)
tax_clean_unclassified <- cleanUnclassified(tax_clean, column = "Class")
tax_clean_unclassified <- cleanUnclassified(tax_clean, column = "Phylum")
###GET TAX LEVEL AND THE CORRESPONDING ELEMENTS ###
TAX.LIST <- sort(unique(tax_clean[,eval(TAXONOMY_LEVEL)]))
TAX.LENGTH <- as.numeric(length(TAX.LIST))
#SUBSET TAXONOMY
#save OTU info in row names
rownames(tax_clean_unclassified) <- tax_clean_unclassified$OTU
tax_clean_unclassified <- subset(tax_clean_unclassified, select = eval(TAXONOMY_LEVEL))
#add back in OTU column using row names
tax_clean_unclassified$OTU <- rownames(tax_clean_unclassified)
###PART 2. CREATE RELATIVE ABUNDANCE FILE###
#selects for samples with 1000+ total reads and otus with 200+ total reads
otu.info <- subset(otu.info, select = -c(label, numOtus))
otu.info <- otu.info[rowSums(otu.info) > 1000, ]
#select just p19 values
otu.info$Temp_Name <- rownames(otu.info)
otu.info <- otu.info[otu.info$Temp_Name %in% meta$Sample,] #selects the exact number of samples, accounts for otu.info files with multiple timepoints
otu.info <- subset(otu.info, select = -Temp_Name)
#selects correct otus
otu.info <- otu.info[,names(otu.info) %in% tax_clean$OTU]
otu.matrix <- as.matrix(otu.info)
otu.rel <- otu.matrix/rowSums(otu.matrix) #check with 'rowSums(otu.rel)' all rows = 1
#otu.rel <- subset(otu.rel, select = -c(label, numOtus))
otu.rel.t <- t(otu.rel) #transpose #check with 'colSums(otu.rel.t)' all columns = 1
otu.rel.t <- as.data.frame(otu.rel.t) #make it so we can add back in OTU names without changing to list
otu.rel.t$OTU <- rownames(otu.rel.t) #add OTUs column so we can merge
rm_g <- merge(tax_clean_unclassified, otu.rel.t, by.x = "OTU", by.y = "OTU")
otubar <- as.matrix(rm_g)
names(otubar) <- names(rm_g) #as.matrix deletes col.names and row.names, immediately reassign column names because no ordering has occured.
rownames(otubar) <- rm_g[,eval(TAXONOMY_LEVEL)]
otubar <- subset(otubar, select = -c(1:2)) #deletes first two columns.  Col1 = OTU, Col2 = eval(TAXONOMY_LEVEL) selection
bar <- as.data.frame(t(otubar))
bar$Sample <- rownames(bar)
bar_meta <- merge(meta, bar, by.x = "Sample", by.y = "Sample")
bar_ordered <- bar_meta[order(bar_meta$Group),]
#splits into separate groups
##GET GROUPS##
GROUP.LIST <- as.character(sort(unique(meta$Group)))
GROUP.LENGTH <- as.numeric(length(GROUP.LIST))
all <- split(bar_ordered, bar_ordered$Group)
#create sums columns in all tables
all_SUMS <- lapply(all, createEmptySumsTable) #function defined at top of script
#calculate sums columns in all tables
all_SUMS_CALC <- lapply(all_SUMS, calculateSumsTable) #fxn defined at top of script
function (x, i, j, value)
View(all)
View(otubar)
all <- split(bar_ordered, bar_ordered$Group)
#create sums columns in all tables
all_SUMS <- lapply(all, createEmptySumsTable) #function defined at top of script
#calculate sums columns in all tables
all_SUMS_CALC <- lapply(all_SUMS, calculateSumsTable) #fxn defined at top of script
View(tax_clean_unclassified)
View(rm_g)
View(otubar)
View(rm_g)
View(bar)
View(bar_ordered)
View(all)
View(all)
rm(list=ls())
#TITLE
###Dynamic Relative Abundance Plots Unclassified Test
###Adapted to Plot the Genus Lactobacillus and Remove Unclassified OTUs
#DESCRIPTION:
###Plots relative abundance plots for multiple taxonomic levels
###First, specify either Phylum, Class, Order, and Family.
###Second, specify which taxa to plot.
###****Used to test the removal of "unclassified" OTUs and its impact on final results.
###E.g. LEVEL: Phylum; TAXA: Firmicutes
#AUTHOR:
###Date Created: 06-07-2019
###Date Last Modified:  06-07-2019
###Created by Zach Carlson, BS
###email: zcarlson@umich.edu
###DO NOT REMOVE ABOVE TEXT#
library(RColorBrewer) #gives color schemes
library(ggplot2) #data plotter
library(gplots) #data plotter
library(vegan) #ecology package, diversity analysis, etc.
library(plyr) #tool for splitting, applying, and combining data
library(stringr) #loaded to use str_replace_all() which removes all special characters in a string
library(tm) #loaded to use removeNumbers() which removes any number in a string
library(shiny)
library(tidyverse) #ggplot2, tibble, purrr, tidyr, readr, dplyr, stringr, forcats
library(ggpubr)
######READ IN FUNCTIONS FILE######
source("~/Downloads/R_Microbiome/utilities.R")
##################################
######ENTER IN VALUES######
TITLE <- "Relative Test"
TAXONOMY_LEVEL <- "Genus"
TAXA_ELEMENT <- "Clostridium XlVa  "
TAXONOMY.FILE <- "combined.final.0.03.cons.taxonomy" #Cols: Size, Taxonomy
TIMEPOINT.FILE <- "combined.final.shared" #Cols: OTU0001, OTU0002, etc.
DESIGN.FILE <- "combined_P19.design.txt" #Cols: Row, Sample, Group
###########################
#get into correct directory
setwd("~/Downloads/Microbiome-June2019/Cohort_7_9/P19_UnclassifiedTest/") #mac users
#READ IN RAW FILES
tax <- read.table(file=TAXONOMY.FILE,
row.names = 1,
header=TRUE,
check.names=FALSE,
comment.char="") #will become otu.class
otu.info <- read.table(file=TIMEPOINT.FILE, header=TRUE, row.names = 2) #will become rm_g
meta <- read.table(file=DESIGN.FILE, row.names = NULL, header =TRUE)
#CLEAN TAXONOMY FILE
#separate .taxonomy raw file into columns for each taxonomy level, maintain the word "unclassified".  will delete OTUs with "unclassified" read results next
tax_clean <- cleanTaxonomyKeepUnclassified(tax, minOtu = 200)
tax_clean$OTU <- rownames(tax_clean)
#going through each taxonomy level manually, delete all rows that have "unclassified".  The same OTU count will results if going either
####A. tax_cleanPhylum -> Class -> Order -> Family.
####as opposed to B. tax_clean -> Family
#452 OTUs -> 433 OTUs
tax_clean_phylum <- cleanUnclassified(tax_clean, column = "Phylum")
#433 OTUs -> 415 OTUs
tax_clean_class <- cleanUnclassified(tax_clean_phylum, column = "Class")
#415 OTUs -> 412 OTUs
tax_clean_order <- cleanUnclassified(tax_clean_class, column = "Order")
#412 OTUs -> 370 OTUs
tax_clean_family <- cleanUnclassified(tax_clean_order, column = "Family")
#370 OTUs -> 113 OTUs
tax_clean_genus <- cleanUnclassified(tax_clean_family, column = "Genus")
###GET TAX LEVEL AND THE CORRESPONDING ELEMENTS ###
TAX.LIST <- sort(unique(tax_clean_genus[,eval(TAXONOMY_LEVEL)]))
TAX.LENGTH <- as.numeric(length(TAX.LIST))
###############
#SUBSET TAXONOMY
tax_clean_genus_select <- subset(tax_clean_genus, select = eval(TAXONOMY_LEVEL))
tax_clean_genus_select$OTU <- tax_clean_genus$OTU #cross table assignment! ok because line 83 just takes one column, and line 84 retroactively adds another column from that same graph, without any ordering or sorting
###PART 2. CREATE RELATIVE ABUNDANCE FILE###
###PART 2A.  CLEAN FILES (remove bad OTUs and samples)
#selects for samples with 1000+ total reads and otus with 200+ total reads
otu.info <- subset(otu.info, select = -c(label, numOtus))
otu.info <- otu.info[rowSums(otu.info) > 1000, ]
#select just p19 values
otu.info$Temp_Name <- rownames(otu.info)
#removes any sample in meta that didn't have enough reads in otu.info
meta <- meta[meta$Sample %in% otu.info$Temp_Name,]
#removes all samples in otu.info that are not in the specific meta file (in other words, if the otu.info has multiple timepoints, meta can be used to subset by timepoint)
otu.info <- otu.info[otu.info$Temp_Name %in% meta$Sample,]
otu.info <- subset(otu.info, select = -Temp_Name)
#finally, delete all OTUs that were removed in master tax_clean_genus file
otu.info <- otu.info[,names(otu.info) %in% tax_clean_genus$OTU]
otu.matrix <- as.matrix(otu.info)
otu.rel <- otu.matrix/rowSums(otu.matrix) #check with 'rowSums(otu.rel)' all rows = 1
#otu.rel <- subset(otu.rel, select = -c(label, numOtus))
otu.rel.t <- t(otu.rel) #transpose #check with 'colSums(otu.rel.t)' all columns = 1
otu.rel.t <- as.data.frame(otu.rel.t) #make it so we can add back in OTU names without changing to list
otu.rel.t$OTU <- rownames(otu.rel.t) #add OTUs column so we can merge
rm_g <- merge(tax_clean_genus, otu.rel.t, by.x = "OTU", by.y = "OTU")
###PART 2. COMPLETE###
### rm_g FILE COMPLETED ###
otubar <- as.matrix(rm_g)
names(otubar) <- names(rm_g) #as.matrix deletes col.names and row.names, immediately reassign column names because no ordering has occured.
rownames(otubar) <- rm_g[,eval(TAXONOMY_LEVEL)]
otubar <- subset(otubar, select = -c(1:2)) #deletes first two columns.  Col1 = OTU, Col2 = eval(TAXONOMY_LEVEL) selection
bar <- as.data.frame(t(otubar))
bar$Sample <- rownames(bar)
bar_meta <- merge(meta, bar, by.x = "Sample", by.y = "Sample")
bar_ordered <- bar_meta[order(bar_meta$Group),]
#splits into separate groups
##GET GROUPS##
GROUP.LIST <- as.character(sort(unique(meta$Group)))
GROUP.LENGTH <- as.numeric(length(GROUP.LIST))
###
all <- split(bar_ordered, bar_ordered$Group)
#list2env(all, envir=.GlobalEnv) #converts lists to data frames
#create sums columns in all tables
all_SUMS <- lapply(all, createEmptySumsTable) #function defined at top of script
#calculate sums columns in all tables
all_SUMS_CALC <- lapply(all_SUMS, calculateSumsTable) #fxn defined at top of script
View(all_SUMS_CALC)
View(all_SUMS)
View(all)
#TITLE
###Dynamic Stacked Community Relative Abundance Plots
#DESCRIPTION:
###Plots community relative abundance plots for multiple taxonomic levels
###Can view either Phylum, Class, Order, and Family.
###Genus is theoretically possible, but the large legend makes the graph impossible to see.
#AUTHOR:
###Date Created:  4-22-2019
###Date Last Modified:  06-10-2019
###Created by Zach Carlson, BS
###email: zcarlson@umich.edu
###DO NOT REMOVE ABOVE TEXT#
library(RColorBrewer) #gives color schemes
library(ggplot2) #data plotter
library(gplots) #data plotter
library(vegan) #ecology package, diversity analysis, etc.
library(plyr) #tool for splitting, applying, and combining data
library(stringr) #loaded to use str_replace_all() which removes all special characters in a string
library(tm) #loaded to use removeNumbers() which removes any number in a string
library(shiny)
library(tidyverse) #ggplot2, tibble, purrr, tidyr, readr, dplyr, stringr, forcats
library(ggpubr)
######READ IN FUNCTIONS FILE######
source("~/Downloads/R_Microbiome/utilities.R")
##################################
######ENTER IN VALUES######
TITLE <- "Relative Test"
TAXONOMY_LEVEL <- "Phylum"
TAXONOMY.FILE <- "cohort_d.final.0.03.cons.taxonomy"
TIMEPOINT.FILE <- "cohort_d.final.shared"
DESIGN.FILE <- "cohort_d_4wk.design.txt" #Cols: Row, Sample, Group
###########################
setwd("~/Downloads/R_Microbiome/Barplot")
#READ IN RAW FILES
tax <- read.table(file=TAXONOMY.FILE,
row.names = 1,
header=TRUE,
check.names=FALSE,
comment.char="") #will become otu.class
otu.info <- read.table(file=TIMEPOINT.FILE, header=TRUE, row.names = 2) #will become rm_g
meta <- read.table(file=DESIGN.FILE, row.names = NULL, header =TRUE)
#CLEAN TAXONOMY FILE
tax_clean <- cleanTaxonomyKeepUnclassified(tax, minOtu = 200)
tax_clean_unclassified <- cleanUnclassified(tax_clean, column = "Phylum")
###GET TAX LEVEL AND THE CORRESPONDING ELEMENTS ###
TAX.LIST <- sort(unique(tax_clean[,eval(TAXONOMY_LEVEL)]))
TAX.LENGTH <- as.numeric(length(TAX.LIST))
###############
#SUBSET TAXONOMY
#save OTU info in row names
rownames(tax_clean_unclassified) <- tax_clean_unclassified$OTU
tax_clean_unclassified <- subset(tax_clean_unclassified, select = eval(TAXONOMY_LEVEL))
#add back in OTU column using row names
tax_clean_unclassified$OTU <- rownames(tax_clean_unclassified)
###PART 2. CREATE RELATIVE ABUNDANCE FILE###
#selects for samples with 1000+ total reads and otus with 200+ total reads
otu.info <- subset(otu.info, select = -c(label, numOtus))
otu.info <- otu.info[rowSums(otu.info) > 1000, ]
#select just p19 values
otu.info$Temp_Name <- rownames(otu.info)
otu.info <- otu.info[otu.info$Temp_Name %in% meta$Sample,] #selects the exact number of samples, accounts for otu.info files with multiple timepoints
otu.info <- subset(otu.info, select = -Temp_Name)
#selects correct otus
otu.info <- otu.info[,names(otu.info) %in% tax_clean$OTU]
otu.matrix <- as.matrix(otu.info)
otu.rel <- otu.matrix/rowSums(otu.matrix) #check with 'rowSums(otu.rel)' all rows = 1
#otu.rel <- subset(otu.rel, select = -c(label, numOtus))
otu.rel.t <- t(otu.rel) #transpose #check with 'colSums(otu.rel.t)' all columns = 1
otu.rel.t <- as.data.frame(otu.rel.t) #make it so we can add back in OTU names without changing to list
otu.rel.t$OTU <- rownames(otu.rel.t) #add OTUs column so we can merge
rm_g <- merge(tax_clean_unclassified, otu.rel.t, by.x = "OTU", by.y = "OTU")
###PART 2. COMPLETE###
### rm_g FILE COMPLETED ###
otubar <- as.matrix(rm_g)
names(otubar) <- names(rm_g) #as.matrix deletes col.names and row.names, immediately reassign column names because no ordering has occured.
rownames(otubar) <- rm_g[,eval(TAXONOMY_LEVEL)]
otubar <- subset(otubar, select = -c(1:2)) #deletes first two columns.  Col1 = OTU, Col2 = eval(TAXONOMY_LEVEL) selection
bar <- as.data.frame(t(otubar))
bar$Sample <- rownames(bar)
bar_meta <- merge(meta, bar, by.x = "Sample", by.y = "Sample")
bar_ordered <- bar_meta[order(bar_meta$Group),]
#splits into separate groups
##GET GROUPS##
GROUP.LIST <- as.character(sort(unique(meta$Group)))
GROUP.LENGTH <- as.numeric(length(GROUP.LIST))
###
all <- split(bar_ordered, bar_ordered$Group)
View(all)
all <- split(bar_ordered, bar_ordered$Group)
#create sums columns in all tables
all_SUMS <- lapply(all, createEmptySumsTable) #function defined at top of script
View(all_SUMS)
#calculate sums columns in all tables
all_SUMS_CALC <- lapply(all_SUMS, calculateSumsTable) #fxn defined at top of script
View(all_SUMS)
View(all_SUMS)
#create sums columns in all tables
all_SUMS <- lapply(all, createEmptySumsTable) #function defined at top of script
View(all_SUMS)
View(all)
View(all)
View(all_SUMS)
View(otubar)
View(otu.matrix)
######READ IN FUNCTIONS FILE######
source("~/Downloads/R_Microbiome/utilities.R")
######ENTER IN VALUES######
TITLE <- "Relative Test"
TAXONOMY_LEVEL <- "Phylum"
TAXONOMY.FILE <- "cohort_d.final.0.03.cons.taxonomy"
TIMEPOINT.FILE <- "cohort_d.final.shared"
DESIGN.FILE <- "cohort_d_4wk.design.txt" #Cols: Row, Sample, Group
setwd("~/Downloads/R_Microbiome/Barplot")
#READ IN RAW FILES
tax <- read.table(file=TAXONOMY.FILE,
row.names = 1,
header=TRUE,
check.names=FALSE,
comment.char="") #will become otu.class
otu.info <- read.table(file=TIMEPOINT.FILE, header=TRUE, row.names = 2) #will become rm_g
meta <- read.table(file=DESIGN.FILE, row.names = NULL, header =TRUE)
#CLEAN TAXONOMY FILE
tax_clean <- cleanTaxonomyKeepUnclassified(tax, minOtu = 200)
tax_clean_unclassified <- cleanUnclassified(tax_clean, column = "Phylum")
###GET TAX LEVEL AND THE CORRESPONDING ELEMENTS ###
TAX.LIST <- sort(unique(tax_clean[,eval(TAXONOMY_LEVEL)]))
TAX.LENGTH <- as.numeric(length(TAX.LIST))
#SUBSET TAXONOMY
#save OTU info in row names
rownames(tax_clean_unclassified) <- tax_clean_unclassified$OTU
tax_clean_unclassified <- subset(tax_clean_unclassified, select = eval(TAXONOMY_LEVEL))
#add back in OTU column using row names
tax_clean_unclassified$OTU <- rownames(tax_clean_unclassified)
###PART 2. CREATE RELATIVE ABUNDANCE FILE###
#selects for samples with 1000+ total reads and otus with 200+ total reads
otu.info <- subset(otu.info, select = -c(label, numOtus))
otu.info <- otu.info[rowSums(otu.info) > 1000, ]
#select just p19 values
otu.info$Temp_Name <- rownames(otu.info)
otu.info <- otu.info[otu.info$Temp_Name %in% meta$Sample,] #selects the exact number of samples, accounts for otu.info files with multiple timepoints
otu.info <- subset(otu.info, select = -Temp_Name)
#selects correct otus
otu.info <- otu.info[,names(otu.info) %in% tax_clean$OTU]
otu.matrix <- as.matrix(otu.info)
#selects correct otus
otu.info <- otu.info[,names(otu.info) %in% tax_clean_unclassified$OTU]
otu.matrix <- as.matrix(otu.info)
otu.rel <- otu.matrix/rowSums(otu.matrix) #check with 'rowSums(otu.rel)' all rows = 1
#otu.rel <- subset(otu.rel, select = -c(label, numOtus))
otu.rel.t <- t(otu.rel) #transpose #check with 'colSums(otu.rel.t)' all columns = 1
otu.rel.t <- as.data.frame(otu.rel.t) #make it so we can add back in OTU names without changing to list
otu.rel.t$OTU <- rownames(otu.rel.t) #add OTUs column so we can merge
rm_g <- merge(tax_clean_unclassified, otu.rel.t, by.x = "OTU", by.y = "OTU")
otubar <- as.matrix(rm_g)
names(otubar) <- names(rm_g) #as.matrix deletes col.names and row.names, immediately reassign column names because no ordering has occured.
rownames(otubar) <- rm_g[,eval(TAXONOMY_LEVEL)]
otubar <- subset(otubar, select = -c(1:2)) #deletes first two columns.  Col1 = OTU, Col2 = eval(TAXONOMY_LEVEL) selection
bar <- as.data.frame(t(otubar))
bar$Sample <- rownames(bar)
bar_meta <- merge(meta, bar, by.x = "Sample", by.y = "Sample")
bar_ordered <- bar_meta[order(bar_meta$Group),]
#splits into separate groups
##GET GROUPS##
GROUP.LIST <- as.character(sort(unique(meta$Group)))
GROUP.LENGTH <- as.numeric(length(GROUP.LIST))
all <- split(bar_ordered, bar_ordered$Group)
#create sums columns in all tables
all_SUMS <- lapply(all, createEmptySumsTable) #function defined at top of script
######READ IN FUNCTIONS FILE######
source("~/Downloads/R_Microbiome/utilities.R")
all <- split(bar_ordered, bar_ordered$Group)
#create sums columns in all tables
all_SUMS <- lapply(all, createEmptySumsTable) #function defined at top of script
#calculate sums columns in all tables
all_SUMS_CALC <- lapply(all_SUMS, calculateSumsTable) #fxn defined at top of script
#export sums tables
all_SUMS_CALC_TABLES <- lapply(all_SUMS_CALC, exportSumsTable) #fxn defined at top of script
View(all_SUMS_CALC_TABLES)
View(all_SUMS_CALC)
all <- split(bar_ordered, bar_ordered$Group)
all <- split(bar_ordered, bar_ordered$Group)
#create sums columns in all tables
all_SUMS <- lapply(all, createEmptySumsTable) #function defined at top of script
#calculate sums columns in all tables
all_SUMS_CALC <- lapply(all_SUMS, calculateSumsTable) #fxn defined at top of script
View(rm_g)
View(tax_clean_unclassified)
